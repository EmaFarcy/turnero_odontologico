#CLASES----------------------------------------

from abb import ArbolBinarioBusqueda


class Persona: #Creo la clase Persona.
    def __init__(self, dni, nombre, apellido, contacto, direccion):
        self.dni = dni
        self.nombre = nombre
        self.apellido = apellido
        self.contacto = contacto
        self.direccion = direccion
    

class Paciente(Persona): #Creo la clase Paciente.
    def __init__(self, dni, nombre, apellido, contacto, direccion, obra_social):
        super().__init__(dni, nombre, apellido, contacto, direccion)
        self.obra_social = obra_social
    
    def __str__(self): #Muestra los datos en una cadena
        return f"Paciente {self.nombre} {self.apellido}, DNI {self.dni}, Telefono {self.contacto}, Dirección {self.direccion}, Obra social {self.obra_social}"
# Muestra los datos en forma de columna
#         return "Dni: {0}\nNombre: {1}\nApellido: {2}\nContacto: {3}\nDireccion: {4}\nObra Social: {5}" \
#             .format(self.dni, self.nombre, self.apellido, self.contacto, self.direccion, self.obra_social)


class Profesional(Persona): #Creo la clase Profesional.
    def __init__(self, dni, nombre, apellido, contacto, direccion, consultorio):
        super().__init__(dni, nombre, apellido, contacto, direccion) #Profesional es una subclase que hereda de Persona. Utilizo el super() para heredar los atributos de la clase padre.
        self.consultorio = consultorio
        
    def __str__(self): #Muestra los datos en una cadena
        return f"Paciente {self.nombre} {self.apellido}, DNI {self.dni}, Telefono {self.contacto}, Dirección {self.direccion}"
# Muestra los datos en forma de columna
#       return "Dni: {0}\nNombre: {1}\nApellido: {2}\nContacto: {3}\nDireccion: {4}\nConsultorio: {5}"\
#       .format(self.dni, self.nombre, self.apellido, self.contacto, self.direccion, self.consultorio)


class Turno: #Creo la clase Turno.
    def __init__(self, paciente, dni, profesional, consultorio, fecha, hora):
        self.paciente = paciente
        self.dni = dni
        self.profesional = profesional
        self.consultorio = consultorio
        self.fecha = fecha
        self.hora = hora
        
    def __str__(self): #Muestra los datos en una cadena
        return f"ID_turno: ({self.dni}, {self.fecha}, {self.hora}), Paciente: {self.paciente}, Profesional: {self.profesional}, Consultorio: {self.consultorio}"
# Muestra los datos en forma de columna
#       return "ID_turno: {0}\nPaciente: {1}\nProfesional: {2}\nConsultorio: {3}"\
#       .format(self.id_turno, self.paciente, self.profesional, self.consultorio)

class Clinica:
    
    def __init__(self):
        self.lista_pacientes = ArbolBinarioBusqueda()
        self.lista_profesionales = ArbolBinarioBusqueda()
        self.lista_turnos = ArbolBinarioBusqueda()


    def alta_paciente(self, clave_paciente, valores_paciente):
        self.lista_pacientes.__setitem__(clave_paciente, valores_paciente)

    def alta_profesional(self, clave_profesional, valores_profesional):
        self.lista_profesionales.__setitem__(clave_profesional, valores_profesional)

    def alta_turno(self,clave_turno, valores_turno):
        self.lista_turnos.__setitem__(clave_turno, valores_turno)

    def ver_paciente(self,clave_paciente):
        if not self.lista_pacientes.__contains__(clave_paciente):
            return False
        else:
            return self.lista_pacientes.__getitem__(clave_paciente)

    def ver_profesional(self, clave_profesional):
        if not self.lista_profesionales.__contains__(clave_profesional):
            return False
        else:
            return self.lista_profesionales.__getitem__(clave_profesional)

    def ver_turno(self, clave_turno):
        if not self.lista_turnos.__contains__(clave_turno):
            return False
        else:
            return self.lista_turnos.__getitem__(clave_turno)

    def baja_paciente(self, clave_paciente):
        if not self.lista_pacientes.__contains__(clave_paciente):
            return False
        else:
            return self.lista_pacientes.__delitem__(clave_paciente)

    def baja_profesional(self, clave_profesional):
        if not self.lista_profesionales.__contains__(clave_profesional):
            return False
        else:
            return self.lista_profesionales.__delitem__(clave_profesional)

    def baja_turno(self,clave_turno):
        if not self.lista_turnos.__contains__(clave_turno):
            return False
        else:
            return self.lista_turnos.__delitem__(clave_turno)

    def ver_todos(self, lista):
        if lista == "pacientes":
            return self.lista_pacientes.inorden()
        elif lista == "profesionales":
            return self.lista_profesionales.inorden()
        elif lista == "turnos":
            return self.lista_turnos.inorden()